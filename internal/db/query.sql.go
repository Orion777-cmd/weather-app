// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: query.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const getRecentWeather = `-- name: GetRecentWeather :many
SELECT id, city, query_time, weather_data
FROM weather_query_history
WHERE city = $1 AND query_time >= $2
ORDER BY query_time DESC
`

type GetRecentWeatherParams struct {
	City      string             `db:"city" json:"city"`
	QueryTime pgtype.Timestamptz `db:"query_time" json:"query_time"`
}

func (q *Queries) GetRecentWeather(ctx context.Context, arg GetRecentWeatherParams) ([]WeatherQueryHistory, error) {
	rows, err := q.db.Query(ctx, getRecentWeather, arg.City, arg.QueryTime)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []WeatherQueryHistory
	for rows.Next() {
		var i WeatherQueryHistory
		if err := rows.Scan(
			&i.ID,
			&i.City,
			&i.QueryTime,
			&i.WeatherData,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getWeatherByLocation = `-- name: GetWeatherByLocation :one
SELECT id, city, query_time, weather_data
FROM weather_query_history
WHERE city = $1
ORDER BY query_time DESC
LIMIT 1
`

func (q *Queries) GetWeatherByLocation(ctx context.Context, city string) (WeatherQueryHistory, error) {
	row := q.db.QueryRow(ctx, getWeatherByLocation, city)
	var i WeatherQueryHistory
	err := row.Scan(
		&i.ID,
		&i.City,
		&i.QueryTime,
		&i.WeatherData,
	)
	return i, err
}

const insertWeatherQuery = `-- name: InsertWeatherQuery :one
INSERT INTO weather_query_history (city, weather_data)
VALUES ($1, $2::jsonb)
RETURNING id, city, query_time, weather_data
`

type InsertWeatherQueryParams struct {
	City    string `db:"city" json:"city"`
	Column2 []byte `db:"column_2" json:"column_2"`
}

func (q *Queries) InsertWeatherQuery(ctx context.Context, arg InsertWeatherQueryParams) (WeatherQueryHistory, error) {
	row := q.db.QueryRow(ctx, insertWeatherQuery, arg.City, arg.Column2)
	var i WeatherQueryHistory
	err := row.Scan(
		&i.ID,
		&i.City,
		&i.QueryTime,
		&i.WeatherData,
	)
	return i, err
}
